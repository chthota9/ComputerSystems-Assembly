41 2 0
38 1
22 299 30 438 10 0 \NUL
Page 1:  Input/Output
22 580 33 694 13 0 \NUL
Charishma Thota
22 580 56 695 36 0 \NUL
cthota@ucsc.edu
14 146 93 195 44
14 146 136 195 87
20 220 121 279 102 0
K_4
20 221 79 280 60 0
K_5
11 673 279 700 181 0 1
19 587 212 646 193 0
K_3
19 587 237 646 218 0
K_2
19 587 262 646 243 0
K_1
19 587 288 646 269 0
K_0
22 601 176 743 156 0 \NUL
Keyboard Input Value
11 680 424 707 326 0 1
19 473 446 532 427 0
R_3
19 473 471 532 452 0
R_2
19 473 496 532 477 0
R_1
19 473 522 532 503 0
R_0
22 620 314 711 294 0 \NUL
Running Sum
11 627 425 654 327 0 1
19 473 396 532 377 0
R_5
19 473 421 532 402 0
R_4
14 551 366 600 317
8 33 348 82 299 1 0
20 118 333 177 314 0
AddSub
22 31 301 88 281 0 \NUL
Subtract
22 43 369 71 349 0 \NUL
Add
8 34 467 83 418 0 1
20 119 452 178 433 0
Store
22 31 417 153 397 0 \NUL
Perform Operation
8 37 589 86 540 0 1
20 122 574 181 555 0
Reset
22 33 539 126 519 0 \NUL
Zero Register
25 41 208 148 112
22 44 243 133 223 0 \NUL
Keypad Input
20 190 234 249 215 0
K_0
20 190 164 249 145 0
K_3
20 190 187 249 168 0
K_2
20 190 211 249 192 0
K_1
22 606 102 666 82 0 \NUL
02/07/18
22 543 78 765 58 0 \NUL
Lab 3: Ripple Adder With Memory
22 567 125 705 105 0 \NUL
01J, Eshan Hemmati
22 475 365 521 345 0 \NUL
Output
22 16 40 235 20 0 \NUL
You have to ground these values
22 17 60 187 40 0 \NUL
so it fits within only 6 bits
1 221 111 192 111
1 222 69 192 68
1 674 263 643 278
1 674 257 643 252
1 643 227 674 251
1 674 245 643 202
1 681 408 529 512
1 681 402 529 486
1 529 461 681 396
1 681 390 529 436
1 529 386 628 403
1 628 409 529 411
1 628 391 597 341
1 628 397 597 341
1 79 323 119 323
1 80 442 120 442
1 83 564 123 564
1 191 224 145 198
1 145 192 191 201
1 191 177 145 186
1 145 180 191 154
38 2
22 22 31 129 11 0 \NUL
Page 2: Inverter
35 204 404 253 355 0 0
19 49 358 108 339 0
K_1
19 50 416 109 397 0
AddSub
20 294 358 353 339 0
T_1
7 294 435 343 386 0 1
35 206 275 255 226 0 0
19 51 229 110 210 0
K_0
19 52 287 111 268 0
AddSub
20 293 229 352 210 0
T_0
7 296 306 345 257 0 1
35 204 550 253 501 0 0
19 49 504 108 485 0
K_2
19 50 562 109 543 0
AddSub
20 291 504 350 485 0
T_2
7 294 581 343 532 0 1
35 552 267 601 218 0 0
19 397 221 456 202 0
K_3
19 398 279 457 260 0
AddSub
20 642 221 701 202 0
T_3
7 642 298 691 249 0 1
35 548 402 597 353 0 0
19 393 356 452 337 0
K_4
19 394 414 453 395 0
AddSub
20 635 356 694 337 0
T_4
7 638 433 687 384 0 1
35 555 553 604 504 0 0
19 400 507 459 488 0
K_5
19 401 565 460 546 0
AddSub
20 642 507 701 488 0
T_5
7 645 584 694 535 0 1
22 580 33 694 13 0 \NUL
Charishma Thota
22 580 56 695 36 0 \NUL
cthota@ucsc.edu
22 606 102 666 82 0 \NUL
02/07/18
22 543 78 765 58 0 \NUL
Lab 3: Ripple Adder With Memory
22 567 125 705 105 0 \NUL
01J, Eshan Hemmati
22 19 207 53 187 0 \NUL
IN[0]
22 20 336 54 316 0 \NUL
IN[1]
22 21 482 55 462 0 \NUL
IN[2]
22 389 198 423 178 0 \NUL
IN[3]
22 383 333 417 313 0 \NUL
IN[4]
22 385 485 419 465 0 \NUL
IN[5]
22 34 60 116 40 0 \NUL
Description:
22 360 54 400 34 0 \NUL
Input:
22 466 53 516 33 0 \NUL
Output:
22 365 78 397 58 0 \NUL
 0 0 
22 365 101 397 81 0 \NUL
 0 1 
22 364 125 396 105 0 \NUL
 1 0 
22 364 148 396 128 0 \NUL
 1 1 
22 480 75 500 55 0 \NUL
 0 
22 480 99 500 79 0 \NUL
 1 
22 479 124 499 104 0 \NUL
 1 
22 480 147 500 127 0 \NUL
 0 
22 35 81 308 61 0 \NUL
Uses XOR logic to account for subtraction
22 35 101 317 81 0 \NUL
or addition. If it's subtraction you know you
22 35 120 287 100 0 \NUL
need to take the two's complement by 
22 35 159 195 139 0 \NUL
 taken care in the adder.
22 35 139 273 119 0 \NUL
inverting the bit. The add one part is
22 77 206 164 186 0 \NUL
Least Sig Bit
22 456 484 539 464 0 \NUL
Most Sig Bit
22 194 230 240 210 0 \NUL
0th Bit
22 193 357 239 337 0 \NUL
1st Bit
22 203 500 253 480 0 \NUL
2nd Bit
22 543 214 590 194 0 \NUL
3rd Bit
22 548 356 594 336 0 \NUL
4th Bit
22 558 497 604 477 0 \NUL
5th Bit
1 105 348 205 365
1 106 406 205 393
1 250 379 295 348
1 250 379 295 410
1 107 219 207 236
1 108 277 207 264
1 252 250 294 219
1 252 250 297 281
1 105 494 205 511
1 106 552 205 539
1 250 525 292 494
1 250 525 295 556
1 453 211 553 228
1 454 269 553 256
1 598 242 643 211
1 598 242 643 273
1 449 346 549 363
1 450 404 549 391
1 594 377 636 346
1 594 377 639 408
1 456 497 556 514
1 457 555 556 542
1 601 528 643 497
1 601 528 646 559
38 3
35 314 114 363 65 0 0
3 258 182 307 133 0 0
3 257 227 306 178 0 0
4 344 204 393 155 0 0
35 136 112 185 63 0 0
22 86 31 180 11 0 \NUL
Page 3: Adder
19 9 124 68 105 0
B_0
20 413 189 472 170 0
Cout:0
19 6 95 65 76 0
T_0
19 12 163 71 144 0
AddSub
20 398 98 457 79 0
Sum:0
35 288 287 337 238 0 0
3 229 365 278 316 0 0
3 230 407 279 358 0 0
4 318 386 367 337 0 0
35 112 281 161 232 0 0
19 13 318 72 299 0
B_1
20 387 371 446 352 0
Cout:1
19 13 289 72 270 0
T_1
19 12 347 71 328 0
Cout:0
20 385 281 444 262 0
Sum:1
35 292 477 341 428 0 0
3 264 541 313 492 0 0
3 264 585 313 536 0 0
4 325 564 374 515 0 0
35 144 463 193 414 0 0
19 13 495 72 476 0
B_2
20 394 547 453 528 0
Cout:2
19 14 467 73 448 0
T_2
19 13 523 72 504 0
Cout:1
20 388 458 447 439 0
Sum:2
22 580 33 694 13 0 \NUL
Charishma Thota
22 580 56 695 36 0 \NUL
cthota@ucsc.edu
22 606 102 666 82 0 \NUL
02/07/18
22 543 78 765 58 0 \NUL
Lab 3: Ripple Adder With Memory
22 567 125 705 105 0 \NUL
01J, Eshan Hemmati
22 365 124 452 104 0 \NUL
Least Sig Bit
22 385 151 431 131 0 \NUL
0th Bit
22 385 319 431 299 0 \NUL
1st Bit
22 391 508 441 488 0 \NUL
2nd Bit
22 10 74 44 54 0 \NUL
IN[0]
22 11 261 45 241 0 \NUL
IN[1]
22 15 441 49 421 0 \NUL
IN[2]
22 493 148 505 128 0 \NUL
T
22 510 148 524 128 0 \NUL
B
22 530 148 555 128 0 \NUL
Cin
22 563 149 596 129 0 \NUL
Sum
22 602 150 635 130 0 \NUL
Cout
22 494 170 506 150 0 \NUL
0
22 513 170 525 150 0 \NUL
0
22 538 167 550 147 0 \NUL
0
22 573 168 585 148 0 \NUL
0
22 616 169 628 149 0 \NUL
0
22 495 193 507 173 0 \NUL
0
22 513 192 525 172 0 \NUL
1
22 538 191 550 171 0 \NUL
0
22 573 191 585 171 0 \NUL
1
22 616 189 628 169 0 \NUL
0
22 495 216 507 196 0 \NUL
1
22 514 217 526 197 0 \NUL
0
22 538 213 550 193 0 \NUL
0
22 573 211 585 191 0 \NUL
1
22 617 214 629 194 0 \NUL
0
22 495 238 507 218 0 \NUL
1
22 514 239 526 219 0 \NUL
1
22 539 238 551 218 0 \NUL
0
22 573 234 585 214 0 \NUL
0
22 618 238 630 218 0 \NUL
1
22 495 260 507 240 0 \NUL
0
22 514 262 526 242 0 \NUL
0
22 539 262 551 242 0 \NUL
1
22 573 258 585 238 0 \NUL
1
22 617 262 629 242 0 \NUL
0
22 495 284 507 264 0 \NUL
0
22 514 285 526 265 0 \NUL
1
22 539 285 551 265 0 \NUL
1
22 572 282 584 262 0 \NUL
0
22 618 284 630 264 0 \NUL
1
22 495 308 507 288 0 \NUL
1
22 514 308 526 288 0 \NUL
0
22 540 309 552 289 0 \NUL
1
22 573 307 585 287 0 \NUL
0
22 618 309 630 289 0 \NUL
1
22 495 332 507 312 0 \NUL
1
22 515 330 527 310 0 \NUL
1
22 542 332 554 312 0 \NUL
1
22 573 330 585 310 0 \NUL
1
22 617 331 629 311 0 \NUL
1
22 491 367 615 347 0 \NUL
Description Part 1:
22 490 390 779 370 0 \NUL
XOR implements simple addition of 1 and 0,
22 491 409 747 389 0 \NUL
so you need to have two XOR gates for
22 491 452 767 432 0 \NUL
the output is true. This is perfect because 
22 492 472 789 452 0 \NUL
when adding in binary its only 0 when inputs 
22 492 490 748 470 0 \NUL
are the same. Also subtraction is taken
22 491 430 772 410 0 \NUL
the three inputs.Whenever the inputs differ
22 492 510 782 490 0 \NUL
 account for if addsub is 1 because it adds 1
22 491 529 638 509 0 \NUL
to the XOR of T and B.
1 62 85 137 73
1 65 114 137 101
1 182 87 315 75
1 182 87 259 143
1 68 153 259 171
1 68 153 315 103
1 62 85 258 188
1 65 114 258 216
1 303 202 345 193
1 304 157 345 165
1 390 179 414 179
1 360 89 399 88
1 69 279 113 242
1 69 308 113 270
1 158 256 289 248
1 158 256 230 326
1 68 337 230 354
1 68 337 289 276
1 69 279 231 368
1 69 308 231 396
1 276 382 319 375
1 275 340 319 347
1 364 361 388 361
1 334 262 386 271
1 70 457 145 424
1 69 485 145 452
1 190 438 293 438
1 190 438 265 502
1 69 513 265 530
1 69 513 293 466
1 70 457 265 546
1 69 485 265 574
1 310 560 326 553
1 310 516 326 525
1 371 539 395 537
1 338 452 389 448
38 4
35 290 88 339 39 0 0
3 231 155 280 106 0 0
3 202 206 251 157 0 0
4 320 178 369 129 0 0
35 131 79 180 30 0 0
19 14 109 73 90 0
B_3
20 389 160 448 141 0
Cout:3
19 13 84 72 65 0
T_3
19 13 131 72 112 0
Cout:2
20 374 72 433 53 0
Sum:3
35 286 255 335 206 0 0
3 227 324 276 275 0 0
3 210 378 259 329 0 0
4 316 345 365 296 0 0
35 108 253 157 204 0 0
19 13 274 72 255 0
B_4
20 385 327 444 308 0
Cout:4
19 11 248 70 229 0
T_4
19 13 302 72 283 0
Cout:3
20 370 239 429 220 0
Sum:4
35 289 429 338 380 0 0
3 264 497 313 448 0 0
3 247 551 296 502 0 0
4 349 518 398 469 0 0
35 111 427 160 378 0 0
19 12 444 71 425 0
B_5
19 11 419 70 400 0
T_5
19 11 470 70 451 0
Cout:4
20 373 413 432 394 0
Sum:5
7 421 517 470 468 0 1
22 29 27 165 7 0 \NUL
Page 4: Adder Part 2
22 580 33 694 13 0 \NUL
Charishma Thota
22 580 56 695 36 0 \NUL
cthota@ucsc.edu
22 606 102 666 82 0 \NUL
02/07/18
22 543 78 765 58 0 \NUL
Lab 3: Ripple Adder With Memory
22 567 125 705 105 0 \NUL
01J, Eshan Hemmati
22 377 117 424 97 0 \NUL
3rd Bit
22 376 283 422 263 0 \NUL
4th Bit
22 378 468 424 448 0 \NUL
5th Bit
22 362 444 445 424 0 \NUL
Most Sig Bit
22 19 68 53 48 0 \NUL
IN[3]
22 15 224 49 204 0 \NUL
IN[4]
22 17 394 51 374 0 \NUL
IN[5]
22 471 176 530 156 0 \NUL
T XOR B
22 533 175 572 155 0 \NUL
Carry
22 575 175 607 155 0 \NUL
AND
22 674 180 686 160 0 \NUL
T
22 695 179 709 159 0 \NUL
B
22 718 178 750 158 0 \NUL
AND
22 598 150 672 130 0 \NUL
AND Gates
22 489 198 501 178 0 \NUL
0
22 547 195 559 175 0 \NUL
0
22 489 217 501 197 0 \NUL
1
22 548 216 560 196 0 \NUL
0
22 489 238 501 218 0 \NUL
1
22 547 240 559 220 0 \NUL
0
22 489 260 501 240 0 \NUL
0
22 548 262 560 242 0 \NUL
0
22 488 283 500 263 0 \NUL
0
22 548 285 560 265 0 \NUL
1
22 488 305 500 285 0 \NUL
1
22 548 306 560 286 0 \NUL
1
22 488 326 500 306 0 \NUL
1
22 548 325 560 305 0 \NUL
1
22 489 349 501 329 0 \NUL
0
22 549 347 561 327 0 \NUL
1
22 676 200 688 180 0 \NUL
0
22 676 220 688 200 0 \NUL
0
22 676 240 688 220 0 \NUL
1
22 676 262 688 242 0 \NUL
1
22 676 284 688 264 0 \NUL
0
22 676 305 688 285 0 \NUL
0
22 677 327 689 307 0 \NUL
1
22 676 351 688 331 0 \NUL
1
22 696 200 708 180 0 \NUL
0
22 694 220 706 200 0 \NUL
1
22 695 241 707 221 0 \NUL
0
22 696 264 708 244 0 \NUL
1
22 697 286 709 266 0 \NUL
0
22 697 307 709 287 0 \NUL
1
22 699 329 711 309 0 \NUL
1
22 700 351 712 331 0 \NUL
1
22 579 196 591 176 0 \NUL
0
22 581 215 593 195 0 \NUL
0
22 581 236 593 216 0 \NUL
0
22 583 259 595 239 0 \NUL
0
22 582 282 594 262 0 \NUL
0
22 582 305 594 285 0 \NUL
1
22 583 326 595 306 0 \NUL
1
22 583 347 595 327 0 \NUL
0
22 726 198 738 178 0 \NUL
0
22 727 217 739 197 0 \NUL
0
22 727 238 739 218 0 \NUL
0
22 730 261 742 241 0 \NUL
1
22 725 286 737 266 0 \NUL
0
22 726 308 738 288 0 \NUL
0
22 727 328 739 308 0 \NUL
0
22 728 350 740 330 0 \NUL
1
22 473 389 597 369 0 \NUL
Description Part 2:
22 477 410 745 390 0 \NUL
Since there is only a carry out when 1 +1
22 478 429 742 409 0 \NUL
occurs, you would need a logic gate that
22 478 449 756 429 0 \NUL
outputs 1, which the AND gate does.So as 
22 477 470 754 450 0 \NUL
long as one of the AND gates outputs true,
22 477 491 781 471 0 \NUL
this indicates that 1 + 1 occured. Therefore the
22 475 510 774 490 0 \NUL
carry out will output 1 if at least one AND gate
22 475 529 694 509 0 \NUL
returns true by using an OR gate.
1 69 74 132 40
1 70 99 132 68
1 177 54 291 49
1 177 54 232 116
1 69 121 232 144
1 69 121 291 77
1 69 74 203 167
1 70 99 203 195
1 248 181 321 167
1 277 130 321 139
1 366 153 390 150
1 336 63 375 62
1 67 238 109 214
1 69 264 109 242
1 154 228 287 216
1 154 228 228 285
1 69 292 228 313
1 69 292 287 244
1 67 238 211 339
1 69 264 211 367
1 256 353 317 334
1 273 299 317 306
1 362 320 386 317
1 332 230 371 229
1 67 409 112 388
1 68 434 112 416
1 157 402 290 390
1 157 402 265 458
1 67 460 265 486
1 67 460 290 418
1 67 409 248 512
1 68 434 248 540
1 293 526 350 507
1 310 472 350 479
1 335 404 374 403
1 395 493 422 492
38 5
22 23 42 135 22 0 \NUL
Page 5: Register
15 400 143 449 94
24 433 198 482 126 1 1 1
22 505 220 612 200 0 \NUL
Flip-Flop 3rd Bit
7 511 115 560 66 0 1
15 399 480 448 431
24 432 535 481 463 1 1 1
22 504 566 610 546 0 \NUL
Flip-Flop 5th Bit
7 522 456 571 407 0 1
15 111 148 160 99
22 143 239 249 219 0 \NUL
Flip-Flop 0th Bit
7 220 127 269 78 0 1
15 112 310 161 261
24 145 365 194 293 1 1 1
22 170 403 276 383 0 \NUL
Flip-Flop 1st Bit
7 224 298 273 249 0 1
15 406 305 455 256
24 439 360 488 288 1 1 1
22 508 376 614 356 0 \NUL
Flip-Flop 4th Bit
7 520 284 569 235 0 1
15 113 480 162 431
24 146 535 195 463 1 1 1
22 170 565 280 545 0 \NUL
Flip-Flop 2nd Bit
7 223 464 272 415 0 1
19 42 153 101 134 0
Sum:0
19 43 179 102 160 0
Store
19 41 200 100 181 0
Reset
19 44 328 103 309 0
Sum:1
19 44 353 103 334 0
Store
19 45 377 104 358 0
Reset
19 51 493 110 474 0
Sum:2
19 50 516 109 497 0
Store
19 53 540 112 521 0
Reset
19 330 150 389 131 0
Sum:3
19 331 175 390 156 0
Store
19 332 197 391 178 0
Reset
19 336 317 395 298 0
Sum:4
19 335 341 394 322 0
Store
19 337 363 396 344 0
Reset
19 346 500 405 481 0
Sum:5
19 345 524 404 505 0
Store
19 348 546 407 527 0
Reset
20 225 161 284 142 0
R_0
20 224 322 283 303 0
R_1
20 247 493 306 474 0
R_2
20 541 493 600 474 0
R_5
20 545 318 604 299 0
R_4
20 535 156 594 137 0
R_3
22 12 99 99 79 0 \NUL
Least Sig Bit
22 318 437 401 417 0 \NUL
Most Sig Bit
20 226 185 285 166 0
B_0
20 225 350 284 331 0
B_1
20 250 525 309 506 0
B_2
20 545 526 604 507 0
B_5
20 547 349 606 330 0
B_4
20 538 181 597 162 0
B_3
24 144 203 193 131 1 1 1
22 605 28 719 8 0 \NUL
Charishma Thota
22 605 51 720 31 0 \NUL
cthota@ucsc.edu
22 631 97 691 77 0 \NUL
02/07/18
22 568 73 790 53 0 \NUL
Lab 3: Ripple Adder With Memory
22 592 120 730 100 0 \NUL
01J, Eshan Hemmati
22 4 128 38 108 0 \NUL
IN[0]
22 4 304 38 284 0 \NUL
IN[1]
22 6 471 40 451 0 \NUL
IN[2]
22 333 119 367 99 0 \NUL
IN[3]
22 341 284 375 264 0 \NUL
IN[4]
22 356 466 390 446 0 \NUL
IN[5]
22 157 22 239 2 0 \NUL
Description:
22 158 42 555 22 0 \NUL
The register stores the running sum. It gets the sum from the
22 158 62 528 42 0 \NUL
 adders output. It then sends the running sum to be used
22 159 83 461 63 0 \NUL
in the adder when a new number is pushed in.
1 446 118 447 128
1 479 146 512 90
1 445 455 446 465
1 478 483 523 431
1 158 285 159 295
1 191 313 225 273
1 452 280 453 290
1 485 308 521 259
1 159 455 160 465
1 192 483 224 439
1 100 343 146 331
1 106 506 147 501
1 387 165 434 164
1 391 331 440 326
1 401 514 433 501
1 191 313 225 312
1 192 483 248 483
1 479 146 536 146
1 485 308 546 308
1 478 483 542 483
1 100 318 146 313
1 107 483 147 483
1 386 140 434 146
1 392 307 440 308
1 402 490 433 483
1 191 313 226 340
1 192 483 251 515
1 479 146 539 171
1 485 308 548 339
1 478 483 546 516
1 157 123 158 133
1 98 143 145 151
1 99 169 145 169
1 190 151 221 102
1 190 151 226 151
1 190 151 227 175
1 97 190 158 199
1 388 187 447 194
1 101 367 159 361
1 393 353 453 356
1 109 530 160 531
1 404 536 446 531
39 16777215
47 0
40 1 6 6
50 800 600
51 0 100
30
System
16
700
0
0
1
2
2
34
